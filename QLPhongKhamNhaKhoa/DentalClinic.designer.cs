#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QLPhongKhamNhaKhoa
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DentalClinic_Database")]
	public partial class DentalClinicDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAccountPermision(AccountPermision instance);
    partial void UpdateAccountPermision(AccountPermision instance);
    partial void DeleteAccountPermision(AccountPermision instance);
    partial void InsertAppointment(Appointment instance);
    partial void UpdateAppointment(Appointment instance);
    partial void DeleteAppointment(Appointment instance);
    partial void InsertDetailPermision(DetailPermision instance);
    partial void UpdateDetailPermision(DetailPermision instance);
    partial void DeleteDetailPermision(DetailPermision instance);
    partial void InsertDrugSupplier(DrugSupplier instance);
    partial void UpdateDrugSupplier(DrugSupplier instance);
    partial void DeleteDrugSupplier(DrugSupplier instance);
    partial void InsertMedicine(Medicine instance);
    partial void UpdateMedicine(Medicine instance);
    partial void DeleteMedicine(Medicine instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPermision(Permision instance);
    partial void UpdatePermision(Permision instance);
    partial void DeletePermision(Permision instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    partial void InsertPrescription(Prescription instance);
    partial void UpdatePrescription(Prescription instance);
    partial void DeletePrescription(Prescription instance);
    partial void InsertPrescriptionMedicine(PrescriptionMedicine instance);
    partial void UpdatePrescriptionMedicine(PrescriptionMedicine instance);
    partial void DeletePrescriptionMedicine(PrescriptionMedicine instance);
    partial void InsertReceipt(Receipt instance);
    partial void UpdateReceipt(Receipt instance);
    partial void DeleteReceipt(Receipt instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertServiceTreatment(ServiceTreatment instance);
    partial void UpdateServiceTreatment(ServiceTreatment instance);
    partial void DeleteServiceTreatment(ServiceTreatment instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertTreatment(Treatment instance);
    partial void UpdateTreatment(Treatment instance);
    partial void DeleteTreatment(Treatment instance);
    partial void InsertTypeMedicine(TypeMedicine instance);
    partial void UpdateTypeMedicine(TypeMedicine instance);
    partial void DeleteTypeMedicine(TypeMedicine instance);
    partial void InsertWorkingStatus(WorkingStatus instance);
    partial void UpdateWorkingStatus(WorkingStatus instance);
    partial void DeleteWorkingStatus(WorkingStatus instance);
    #endregion
		
		public DentalClinicDataContext() : 
				base(global::QLPhongKhamNhaKhoa.Properties.Settings.Default.DentalClinic_DatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DentalClinicDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DentalClinicDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DentalClinicDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DentalClinicDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<AccountPermision> AccountPermisions
		{
			get
			{
				return this.GetTable<AccountPermision>();
			}
		}
		
		public System.Data.Linq.Table<Appointment> Appointments
		{
			get
			{
				return this.GetTable<Appointment>();
			}
		}
		
		public System.Data.Linq.Table<DetailPermision> DetailPermisions
		{
			get
			{
				return this.GetTable<DetailPermision>();
			}
		}
		
		public System.Data.Linq.Table<DrugSupplier> DrugSuppliers
		{
			get
			{
				return this.GetTable<DrugSupplier>();
			}
		}
		
		public System.Data.Linq.Table<Medicine> Medicines
		{
			get
			{
				return this.GetTable<Medicine>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Permision> Permisions
		{
			get
			{
				return this.GetTable<Permision>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
		
		public System.Data.Linq.Table<Prescription> Prescriptions
		{
			get
			{
				return this.GetTable<Prescription>();
			}
		}
		
		public System.Data.Linq.Table<PrescriptionMedicine> PrescriptionMedicines
		{
			get
			{
				return this.GetTable<PrescriptionMedicine>();
			}
		}
		
		public System.Data.Linq.Table<Receipt> Receipts
		{
			get
			{
				return this.GetTable<Receipt>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<ServiceTreatment> ServiceTreatments
		{
			get
			{
				return this.GetTable<ServiceTreatment>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<Treatment> Treatments
		{
			get
			{
				return this.GetTable<Treatment>();
			}
		}
		
		public System.Data.Linq.Table<TypeMedicine> TypeMedicines
		{
			get
			{
				return this.GetTable<TypeMedicine>();
			}
		}
		
		public System.Data.Linq.Table<WorkingStatus> WorkingStatus
		{
			get
			{
				return this.GetTable<WorkingStatus>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountId;
		
		private string _userName;
		
		private string _passWord;
		
		private string _StaffId;
		
		private EntitySet<AccountPermision> _AccountPermisions;
		
		private EntitySet<WorkingStatus> _WorkingStatus;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnpassWordChanging(string value);
    partial void OnpassWordChanged();
    partial void OnStaffIdChanging(string value);
    partial void OnStaffIdChanged();
    #endregion
		
		public Account()
		{
			this._AccountPermisions = new EntitySet<AccountPermision>(new Action<AccountPermision>(this.attach_AccountPermisions), new Action<AccountPermision>(this.detach_AccountPermisions));
			this._WorkingStatus = new EntitySet<WorkingStatus>(new Action<WorkingStatus>(this.attach_WorkingStatus), new Action<WorkingStatus>(this.detach_WorkingStatus));
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passWord", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string passWord
		{
			get
			{
				return this._passWord;
			}
			set
			{
				if ((this._passWord != value))
				{
					this.OnpassWordChanging(value);
					this.SendPropertyChanging();
					this._passWord = value;
					this.SendPropertyChanged("passWord");
					this.OnpassWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffId", DbType="VarChar(20)")]
		public string StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountPermision", Storage="_AccountPermisions", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<AccountPermision> AccountPermisions
		{
			get
			{
				return this._AccountPermisions;
			}
			set
			{
				this._AccountPermisions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_WorkingStatus", Storage="_WorkingStatus", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<WorkingStatus> WorkingStatus
		{
			get
			{
				return this._WorkingStatus;
			}
			set
			{
				this._WorkingStatus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Account", Storage="_Staff", ThisKey="StaffId", OtherKey="StaffId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._StaffId = value.StaffId;
					}
					else
					{
						this._StaffId = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountPermisions(AccountPermision entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountPermisions(AccountPermision entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_WorkingStatus(WorkingStatus entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_WorkingStatus(WorkingStatus entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountPermision")]
	public partial class AccountPermision : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountPermisionId;
		
		private System.Nullable<int> _AccountId;
		
		private System.Nullable<int> _PermisionId;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Permision> _Permision;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountPermisionIdChanging(int value);
    partial void OnAccountPermisionIdChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    partial void OnPermisionIdChanging(System.Nullable<int> value);
    partial void OnPermisionIdChanged();
    #endregion
		
		public AccountPermision()
		{
			this._Account = default(EntityRef<Account>);
			this._Permision = default(EntityRef<Permision>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountPermisionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountPermisionId
		{
			get
			{
				return this._AccountPermisionId;
			}
			set
			{
				if ((this._AccountPermisionId != value))
				{
					this.OnAccountPermisionIdChanging(value);
					this.SendPropertyChanging();
					this._AccountPermisionId = value;
					this.SendPropertyChanged("AccountPermisionId");
					this.OnAccountPermisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int")]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermisionId", DbType="Int")]
		public System.Nullable<int> PermisionId
		{
			get
			{
				return this._PermisionId;
			}
			set
			{
				if ((this._PermisionId != value))
				{
					if (this._Permision.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermisionIdChanging(value);
					this.SendPropertyChanging();
					this._PermisionId = value;
					this.SendPropertyChanged("PermisionId");
					this.OnPermisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountPermision", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountPermisions.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountPermisions.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permision_AccountPermision", Storage="_Permision", ThisKey="PermisionId", OtherKey="PermisionId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Permision Permision
		{
			get
			{
				return this._Permision.Entity;
			}
			set
			{
				Permision previousValue = this._Permision.Entity;
				if (((previousValue != value) 
							|| (this._Permision.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permision.Entity = null;
						previousValue.AccountPermisions.Remove(this);
					}
					this._Permision.Entity = value;
					if ((value != null))
					{
						value.AccountPermisions.Add(this);
						this._PermisionId = value.PermisionId;
					}
					else
					{
						this._PermisionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Permision");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointment")]
	public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AppointmentId;
		
		private string _nameAppointment;
		
		private System.DateTime _scheduleDate;
		
		private System.TimeSpan _timeBegin;
		
		private System.TimeSpan _timeEnd;
		
		private string _note;
		
		private string _PatientId;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppointmentIdChanging(string value);
    partial void OnAppointmentIdChanged();
    partial void OnnameAppointmentChanging(string value);
    partial void OnnameAppointmentChanged();
    partial void OnscheduleDateChanging(System.DateTime value);
    partial void OnscheduleDateChanged();
    partial void OntimeBeginChanging(System.TimeSpan value);
    partial void OntimeBeginChanged();
    partial void OntimeEndChanging(System.TimeSpan value);
    partial void OntimeEndChanged();
    partial void OnnoteChanging(string value);
    partial void OnnoteChanged();
    partial void OnPatientIdChanging(string value);
    partial void OnPatientIdChanged();
    #endregion
		
		public Appointment()
		{
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentId", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AppointmentId
		{
			get
			{
				return this._AppointmentId;
			}
			set
			{
				if ((this._AppointmentId != value))
				{
					this.OnAppointmentIdChanging(value);
					this.SendPropertyChanging();
					this._AppointmentId = value;
					this.SendPropertyChanged("AppointmentId");
					this.OnAppointmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameAppointment", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string nameAppointment
		{
			get
			{
				return this._nameAppointment;
			}
			set
			{
				if ((this._nameAppointment != value))
				{
					this.OnnameAppointmentChanging(value);
					this.SendPropertyChanging();
					this._nameAppointment = value;
					this.SendPropertyChanged("nameAppointment");
					this.OnnameAppointmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scheduleDate", DbType="Date NOT NULL")]
		public System.DateTime scheduleDate
		{
			get
			{
				return this._scheduleDate;
			}
			set
			{
				if ((this._scheduleDate != value))
				{
					this.OnscheduleDateChanging(value);
					this.SendPropertyChanging();
					this._scheduleDate = value;
					this.SendPropertyChanged("scheduleDate");
					this.OnscheduleDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeBegin", DbType="Time NOT NULL")]
		public System.TimeSpan timeBegin
		{
			get
			{
				return this._timeBegin;
			}
			set
			{
				if ((this._timeBegin != value))
				{
					this.OntimeBeginChanging(value);
					this.SendPropertyChanging();
					this._timeBegin = value;
					this.SendPropertyChanged("timeBegin");
					this.OntimeBeginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeEnd", DbType="Time NOT NULL")]
		public System.TimeSpan timeEnd
		{
			get
			{
				return this._timeEnd;
			}
			set
			{
				if ((this._timeEnd != value))
				{
					this.OntimeEndChanging(value);
					this.SendPropertyChanging();
					this._timeEnd = value;
					this.SendPropertyChanged("timeEnd");
					this.OntimeEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note", DbType="NVarChar(1000)")]
		public string note
		{
			get
			{
				return this._note;
			}
			set
			{
				if ((this._note != value))
				{
					this.OnnoteChanging(value);
					this.SendPropertyChanging();
					this._note = value;
					this.SendPropertyChanged("note");
					this.OnnoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="VarChar(20)")]
		public string PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_Patient", ThisKey="PatientId", OtherKey="PatientId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._PatientId = value.PatientId;
					}
					else
					{
						this._PatientId = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailPermision")]
	public partial class DetailPermision : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DetailPermisionId;
		
		private System.Nullable<int> _PermisionId;
		
		private string _acctionCode;
		
		private EntityRef<Permision> _Permision;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailPermisionIdChanging(int value);
    partial void OnDetailPermisionIdChanged();
    partial void OnPermisionIdChanging(System.Nullable<int> value);
    partial void OnPermisionIdChanged();
    partial void OnacctionCodeChanging(string value);
    partial void OnacctionCodeChanged();
    #endregion
		
		public DetailPermision()
		{
			this._Permision = default(EntityRef<Permision>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailPermisionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DetailPermisionId
		{
			get
			{
				return this._DetailPermisionId;
			}
			set
			{
				if ((this._DetailPermisionId != value))
				{
					this.OnDetailPermisionIdChanging(value);
					this.SendPropertyChanging();
					this._DetailPermisionId = value;
					this.SendPropertyChanged("DetailPermisionId");
					this.OnDetailPermisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermisionId", DbType="Int")]
		public System.Nullable<int> PermisionId
		{
			get
			{
				return this._PermisionId;
			}
			set
			{
				if ((this._PermisionId != value))
				{
					if (this._Permision.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermisionIdChanging(value);
					this.SendPropertyChanging();
					this._PermisionId = value;
					this.SendPropertyChanged("PermisionId");
					this.OnPermisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acctionCode", DbType="VarChar(50)")]
		public string acctionCode
		{
			get
			{
				return this._acctionCode;
			}
			set
			{
				if ((this._acctionCode != value))
				{
					this.OnacctionCodeChanging(value);
					this.SendPropertyChanging();
					this._acctionCode = value;
					this.SendPropertyChanged("acctionCode");
					this.OnacctionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permision_DetailPermision", Storage="_Permision", ThisKey="PermisionId", OtherKey="PermisionId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Permision Permision
		{
			get
			{
				return this._Permision.Entity;
			}
			set
			{
				Permision previousValue = this._Permision.Entity;
				if (((previousValue != value) 
							|| (this._Permision.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permision.Entity = null;
						previousValue.DetailPermisions.Remove(this);
					}
					this._Permision.Entity = value;
					if ((value != null))
					{
						value.DetailPermisions.Add(this);
						this._PermisionId = value.PermisionId;
					}
					else
					{
						this._PermisionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Permision");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrugSuppliers")]
	public partial class DrugSupplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DrugSuppliersId;
		
		private string _nameDrugSuppliers;
		
		private EntitySet<TypeMedicine> _TypeMedicines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrugSuppliersIdChanging(string value);
    partial void OnDrugSuppliersIdChanged();
    partial void OnnameDrugSuppliersChanging(string value);
    partial void OnnameDrugSuppliersChanged();
    #endregion
		
		public DrugSupplier()
		{
			this._TypeMedicines = new EntitySet<TypeMedicine>(new Action<TypeMedicine>(this.attach_TypeMedicines), new Action<TypeMedicine>(this.detach_TypeMedicines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugSuppliersId", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DrugSuppliersId
		{
			get
			{
				return this._DrugSuppliersId;
			}
			set
			{
				if ((this._DrugSuppliersId != value))
				{
					this.OnDrugSuppliersIdChanging(value);
					this.SendPropertyChanging();
					this._DrugSuppliersId = value;
					this.SendPropertyChanged("DrugSuppliersId");
					this.OnDrugSuppliersIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameDrugSuppliers", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string nameDrugSuppliers
		{
			get
			{
				return this._nameDrugSuppliers;
			}
			set
			{
				if ((this._nameDrugSuppliers != value))
				{
					this.OnnameDrugSuppliersChanging(value);
					this.SendPropertyChanging();
					this._nameDrugSuppliers = value;
					this.SendPropertyChanged("nameDrugSuppliers");
					this.OnnameDrugSuppliersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugSupplier_TypeMedicine", Storage="_TypeMedicines", ThisKey="DrugSuppliersId", OtherKey="DrugSuppliersId")]
		public EntitySet<TypeMedicine> TypeMedicines
		{
			get
			{
				return this._TypeMedicines;
			}
			set
			{
				this._TypeMedicines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TypeMedicines(TypeMedicine entity)
		{
			this.SendPropertyChanging();
			entity.DrugSupplier = this;
		}
		
		private void detach_TypeMedicines(TypeMedicine entity)
		{
			this.SendPropertyChanging();
			entity.DrugSupplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicine")]
	public partial class Medicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MedicineId;
		
		private string _nameMedicine;
		
		private System.DateTime _expirationDate;
		
		private int _quantity;
		
		private string _unit;
		
		private System.Nullable<decimal> _price;
		
		private string _TypeMedicineId;
		
		private EntitySet<PrescriptionMedicine> _PrescriptionMedicines;
		
		private EntityRef<TypeMedicine> _TypeMedicine;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicineIdChanging(string value);
    partial void OnMedicineIdChanged();
    partial void OnnameMedicineChanging(string value);
    partial void OnnameMedicineChanged();
    partial void OnexpirationDateChanging(System.DateTime value);
    partial void OnexpirationDateChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    partial void OnunitChanging(string value);
    partial void OnunitChanged();
    partial void OnpriceChanging(System.Nullable<decimal> value);
    partial void OnpriceChanged();
    partial void OnTypeMedicineIdChanging(string value);
    partial void OnTypeMedicineIdChanged();
    #endregion
		
		public Medicine()
		{
			this._PrescriptionMedicines = new EntitySet<PrescriptionMedicine>(new Action<PrescriptionMedicine>(this.attach_PrescriptionMedicines), new Action<PrescriptionMedicine>(this.detach_PrescriptionMedicines));
			this._TypeMedicine = default(EntityRef<TypeMedicine>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineId", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MedicineId
		{
			get
			{
				return this._MedicineId;
			}
			set
			{
				if ((this._MedicineId != value))
				{
					this.OnMedicineIdChanging(value);
					this.SendPropertyChanging();
					this._MedicineId = value;
					this.SendPropertyChanged("MedicineId");
					this.OnMedicineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameMedicine", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string nameMedicine
		{
			get
			{
				return this._nameMedicine;
			}
			set
			{
				if ((this._nameMedicine != value))
				{
					this.OnnameMedicineChanging(value);
					this.SendPropertyChanging();
					this._nameMedicine = value;
					this.SendPropertyChanged("nameMedicine");
					this.OnnameMedicineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expirationDate", DbType="Date NOT NULL")]
		public System.DateTime expirationDate
		{
			get
			{
				return this._expirationDate;
			}
			set
			{
				if ((this._expirationDate != value))
				{
					this.OnexpirationDateChanging(value);
					this.SendPropertyChanging();
					this._expirationDate = value;
					this.SendPropertyChanged("expirationDate");
					this.OnexpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unit", DbType="NVarChar(100)")]
		public string unit
		{
			get
			{
				return this._unit;
			}
			set
			{
				if ((this._unit != value))
				{
					this.OnunitChanging(value);
					this.SendPropertyChanging();
					this._unit = value;
					this.SendPropertyChanged("unit");
					this.OnunitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Money")]
		public System.Nullable<decimal> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeMedicineId", DbType="VarChar(20)")]
		public string TypeMedicineId
		{
			get
			{
				return this._TypeMedicineId;
			}
			set
			{
				if ((this._TypeMedicineId != value))
				{
					if (this._TypeMedicine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeMedicineIdChanging(value);
					this.SendPropertyChanging();
					this._TypeMedicineId = value;
					this.SendPropertyChanged("TypeMedicineId");
					this.OnTypeMedicineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_PrescriptionMedicine", Storage="_PrescriptionMedicines", ThisKey="MedicineId", OtherKey="MedicineId")]
		public EntitySet<PrescriptionMedicine> PrescriptionMedicines
		{
			get
			{
				return this._PrescriptionMedicines;
			}
			set
			{
				this._PrescriptionMedicines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMedicine_Medicine", Storage="_TypeMedicine", ThisKey="TypeMedicineId", OtherKey="TypeMedicineId", IsForeignKey=true, DeleteRule="CASCADE")]
		public TypeMedicine TypeMedicine
		{
			get
			{
				return this._TypeMedicine.Entity;
			}
			set
			{
				TypeMedicine previousValue = this._TypeMedicine.Entity;
				if (((previousValue != value) 
							|| (this._TypeMedicine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeMedicine.Entity = null;
						previousValue.Medicines.Remove(this);
					}
					this._TypeMedicine.Entity = value;
					if ((value != null))
					{
						value.Medicines.Add(this);
						this._TypeMedicineId = value.TypeMedicineId;
					}
					else
					{
						this._TypeMedicineId = default(string);
					}
					this.SendPropertyChanged("TypeMedicine");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrescriptionMedicines(PrescriptionMedicine entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = this;
		}
		
		private void detach_PrescriptionMedicines(PrescriptionMedicine entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PatientId;
		
		private string _fullName;
		
		private System.DateTime _dateOfBirth;
		
		private bool _gender;
		
		private string _phone;
		
		private string _address;
		
		private string _email;
		
		private string _note;
		
		private EntitySet<Appointment> _Appointments;
		
		private EntitySet<Prescription> _Prescriptions;
		
		private EntitySet<Receipt> _Receipts;
		
		private EntitySet<Treatment> _Treatments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIdChanging(string value);
    partial void OnPatientIdChanged();
    partial void OnfullNameChanging(string value);
    partial void OnfullNameChanged();
    partial void OndateOfBirthChanging(System.DateTime value);
    partial void OndateOfBirthChanged();
    partial void OngenderChanging(bool value);
    partial void OngenderChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnnoteChanging(string value);
    partial void OnnoteChanged();
    #endregion
		
		public Patient()
		{
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			this._Receipts = new EntitySet<Receipt>(new Action<Receipt>(this.attach_Receipts), new Action<Receipt>(this.detach_Receipts));
			this._Treatments = new EntitySet<Treatment>(new Action<Treatment>(this.attach_Treatments), new Action<Treatment>(this.detach_Treatments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string fullName
		{
			get
			{
				return this._fullName;
			}
			set
			{
				if ((this._fullName != value))
				{
					this.OnfullNameChanging(value);
					this.SendPropertyChanging();
					this._fullName = value;
					this.SendPropertyChanged("fullName");
					this.OnfullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime dateOfBirth
		{
			get
			{
				return this._dateOfBirth;
			}
			set
			{
				if ((this._dateOfBirth != value))
				{
					this.OndateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._dateOfBirth = value;
					this.SendPropertyChanged("dateOfBirth");
					this.OndateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="Bit NOT NULL")]
		public bool gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(100)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(200)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note", DbType="NVarChar(100)")]
		public string note
		{
			get
			{
				return this._note;
			}
			set
			{
				if ((this._note != value))
				{
					this.OnnoteChanging(value);
					this.SendPropertyChanging();
					this._note = value;
					this.SendPropertyChanged("note");
					this.OnnoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_Appointments", ThisKey="PatientId", OtherKey="PatientId")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Prescription", Storage="_Prescriptions", ThisKey="PatientId", OtherKey="PatientId")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Receipt", Storage="_Receipts", ThisKey="PatientId", OtherKey="PatientId")]
		public EntitySet<Receipt> Receipts
		{
			get
			{
				return this._Receipts;
			}
			set
			{
				this._Receipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Treatment", Storage="_Treatments", ThisKey="PatientId", OtherKey="PatientId")]
		public EntitySet<Treatment> Treatments
		{
			get
			{
				return this._Treatments;
			}
			set
			{
				this._Treatments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permision")]
	public partial class Permision : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermisionId;
		
		private string _namePermision;
		
		private EntitySet<AccountPermision> _AccountPermisions;
		
		private EntitySet<DetailPermision> _DetailPermisions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermisionIdChanging(int value);
    partial void OnPermisionIdChanged();
    partial void OnnamePermisionChanging(string value);
    partial void OnnamePermisionChanged();
    #endregion
		
		public Permision()
		{
			this._AccountPermisions = new EntitySet<AccountPermision>(new Action<AccountPermision>(this.attach_AccountPermisions), new Action<AccountPermision>(this.detach_AccountPermisions));
			this._DetailPermisions = new EntitySet<DetailPermision>(new Action<DetailPermision>(this.attach_DetailPermisions), new Action<DetailPermision>(this.detach_DetailPermisions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermisionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PermisionId
		{
			get
			{
				return this._PermisionId;
			}
			set
			{
				if ((this._PermisionId != value))
				{
					this.OnPermisionIdChanging(value);
					this.SendPropertyChanging();
					this._PermisionId = value;
					this.SendPropertyChanged("PermisionId");
					this.OnPermisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_namePermision", DbType="NVarChar(50)")]
		public string namePermision
		{
			get
			{
				return this._namePermision;
			}
			set
			{
				if ((this._namePermision != value))
				{
					this.OnnamePermisionChanging(value);
					this.SendPropertyChanging();
					this._namePermision = value;
					this.SendPropertyChanged("namePermision");
					this.OnnamePermisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permision_AccountPermision", Storage="_AccountPermisions", ThisKey="PermisionId", OtherKey="PermisionId")]
		public EntitySet<AccountPermision> AccountPermisions
		{
			get
			{
				return this._AccountPermisions;
			}
			set
			{
				this._AccountPermisions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permision_DetailPermision", Storage="_DetailPermisions", ThisKey="PermisionId", OtherKey="PermisionId")]
		public EntitySet<DetailPermision> DetailPermisions
		{
			get
			{
				return this._DetailPermisions;
			}
			set
			{
				this._DetailPermisions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountPermisions(AccountPermision entity)
		{
			this.SendPropertyChanging();
			entity.Permision = this;
		}
		
		private void detach_AccountPermisions(AccountPermision entity)
		{
			this.SendPropertyChanging();
			entity.Permision = null;
		}
		
		private void attach_DetailPermisions(DetailPermision entity)
		{
			this.SendPropertyChanging();
			entity.Permision = this;
		}
		
		private void detach_DetailPermisions(DetailPermision entity)
		{
			this.SendPropertyChanging();
			entity.Permision = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Position")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PositionId;
		
		private string _namePosition;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPositionIdChanging(int value);
    partial void OnPositionIdChanged();
    partial void OnnamePositionChanging(string value);
    partial void OnnamePositionChanged();
    #endregion
		
		public Position()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PositionId
		{
			get
			{
				return this._PositionId;
			}
			set
			{
				if ((this._PositionId != value))
				{
					this.OnPositionIdChanging(value);
					this.SendPropertyChanging();
					this._PositionId = value;
					this.SendPropertyChanged("PositionId");
					this.OnPositionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_namePosition", DbType="NVarChar(100)")]
		public string namePosition
		{
			get
			{
				return this._namePosition;
			}
			set
			{
				if ((this._namePosition != value))
				{
					this.OnnamePositionChanging(value);
					this.SendPropertyChanging();
					this._namePosition = value;
					this.SendPropertyChanged("namePosition");
					this.OnnamePositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Staff", Storage="_Staffs", ThisKey="PositionId", OtherKey="PositionId")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prescription")]
	public partial class Prescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PrescriptionId;
		
		private string _namePrescription;
		
		private System.Nullable<System.DateTime> _createdDate;
		
		private string _PatientId;
		
		private string _StaffId;
		
		private EntitySet<PrescriptionMedicine> _PrescriptionMedicines;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrescriptionIdChanging(string value);
    partial void OnPrescriptionIdChanged();
    partial void OnnamePrescriptionChanging(string value);
    partial void OnnamePrescriptionChanged();
    partial void OncreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OncreatedDateChanged();
    partial void OnPatientIdChanging(string value);
    partial void OnPatientIdChanged();
    partial void OnStaffIdChanging(string value);
    partial void OnStaffIdChanged();
    #endregion
		
		public Prescription()
		{
			this._PrescriptionMedicines = new EntitySet<PrescriptionMedicine>(new Action<PrescriptionMedicine>(this.attach_PrescriptionMedicines), new Action<PrescriptionMedicine>(this.detach_PrescriptionMedicines));
			this._Patient = default(EntityRef<Patient>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionId", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PrescriptionId
		{
			get
			{
				return this._PrescriptionId;
			}
			set
			{
				if ((this._PrescriptionId != value))
				{
					this.OnPrescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionId = value;
					this.SendPropertyChanged("PrescriptionId");
					this.OnPrescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_namePrescription", DbType="NVarChar(100)")]
		public string namePrescription
		{
			get
			{
				return this._namePrescription;
			}
			set
			{
				if ((this._namePrescription != value))
				{
					this.OnnamePrescriptionChanging(value);
					this.SendPropertyChanging();
					this._namePrescription = value;
					this.SendPropertyChanged("namePrescription");
					this.OnnamePrescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="Date")]
		public System.Nullable<System.DateTime> createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="VarChar(20)")]
		public string PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffId", DbType="VarChar(20)")]
		public string StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_PrescriptionMedicine", Storage="_PrescriptionMedicines", ThisKey="PrescriptionId", OtherKey="PrescriptionId")]
		public EntitySet<PrescriptionMedicine> PrescriptionMedicines
		{
			get
			{
				return this._PrescriptionMedicines;
			}
			set
			{
				this._PrescriptionMedicines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Prescription", Storage="_Patient", ThisKey="PatientId", OtherKey="PatientId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._PatientId = value.PatientId;
					}
					else
					{
						this._PatientId = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Prescription", Storage="_Staff", ThisKey="StaffId", OtherKey="StaffId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._StaffId = value.StaffId;
					}
					else
					{
						this._StaffId = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrescriptionMedicines(PrescriptionMedicine entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = this;
		}
		
		private void detach_PrescriptionMedicines(PrescriptionMedicine entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrescriptionMedicine")]
	public partial class PrescriptionMedicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrescriptionMedicineID;
		
		private string _PrescriptionId;
		
		private string _MedicineId;
		
		private int _quantity;
		
		private EntityRef<Medicine> _Medicine;
		
		private EntityRef<Prescription> _Prescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrescriptionMedicineIDChanging(int value);
    partial void OnPrescriptionMedicineIDChanged();
    partial void OnPrescriptionIdChanging(string value);
    partial void OnPrescriptionIdChanged();
    partial void OnMedicineIdChanging(string value);
    partial void OnMedicineIdChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    #endregion
		
		public PrescriptionMedicine()
		{
			this._Medicine = default(EntityRef<Medicine>);
			this._Prescription = default(EntityRef<Prescription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionMedicineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PrescriptionMedicineID
		{
			get
			{
				return this._PrescriptionMedicineID;
			}
			set
			{
				if ((this._PrescriptionMedicineID != value))
				{
					this.OnPrescriptionMedicineIDChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionMedicineID = value;
					this.SendPropertyChanged("PrescriptionMedicineID");
					this.OnPrescriptionMedicineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionId", DbType="VarChar(50)")]
		public string PrescriptionId
		{
			get
			{
				return this._PrescriptionId;
			}
			set
			{
				if ((this._PrescriptionId != value))
				{
					if (this._Prescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionId = value;
					this.SendPropertyChanged("PrescriptionId");
					this.OnPrescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineId", DbType="VarChar(20)")]
		public string MedicineId
		{
			get
			{
				return this._MedicineId;
			}
			set
			{
				if ((this._MedicineId != value))
				{
					if (this._Medicine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicineIdChanging(value);
					this.SendPropertyChanging();
					this._MedicineId = value;
					this.SendPropertyChanged("MedicineId");
					this.OnMedicineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_PrescriptionMedicine", Storage="_Medicine", ThisKey="MedicineId", OtherKey="MedicineId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Medicine Medicine
		{
			get
			{
				return this._Medicine.Entity;
			}
			set
			{
				Medicine previousValue = this._Medicine.Entity;
				if (((previousValue != value) 
							|| (this._Medicine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicine.Entity = null;
						previousValue.PrescriptionMedicines.Remove(this);
					}
					this._Medicine.Entity = value;
					if ((value != null))
					{
						value.PrescriptionMedicines.Add(this);
						this._MedicineId = value.MedicineId;
					}
					else
					{
						this._MedicineId = default(string);
					}
					this.SendPropertyChanged("Medicine");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_PrescriptionMedicine", Storage="_Prescription", ThisKey="PrescriptionId", OtherKey="PrescriptionId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Prescription Prescription
		{
			get
			{
				return this._Prescription.Entity;
			}
			set
			{
				Prescription previousValue = this._Prescription.Entity;
				if (((previousValue != value) 
							|| (this._Prescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prescription.Entity = null;
						previousValue.PrescriptionMedicines.Remove(this);
					}
					this._Prescription.Entity = value;
					if ((value != null))
					{
						value.PrescriptionMedicines.Add(this);
						this._PrescriptionId = value.PrescriptionId;
					}
					else
					{
						this._PrescriptionId = default(string);
					}
					this.SendPropertyChanged("Prescription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Receipt")]
	public partial class Receipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ReceiptId;
		
		private System.Nullable<System.DateTime> _receiptdate;
		
		private System.Nullable<decimal> _total;
		
		private string _note;
		
		private string _PatientId;
		
		private string _StaffId;
		
		private System.Nullable<bool> _statusReceipt;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceiptIdChanging(string value);
    partial void OnReceiptIdChanged();
    partial void OnreceiptdateChanging(System.Nullable<System.DateTime> value);
    partial void OnreceiptdateChanged();
    partial void OntotalChanging(System.Nullable<decimal> value);
    partial void OntotalChanged();
    partial void OnnoteChanging(string value);
    partial void OnnoteChanged();
    partial void OnPatientIdChanging(string value);
    partial void OnPatientIdChanged();
    partial void OnStaffIdChanging(string value);
    partial void OnStaffIdChanged();
    partial void OnstatusReceiptChanging(System.Nullable<bool> value);
    partial void OnstatusReceiptChanged();
    #endregion
		
		public Receipt()
		{
			this._Patient = default(EntityRef<Patient>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptId", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ReceiptId
		{
			get
			{
				return this._ReceiptId;
			}
			set
			{
				if ((this._ReceiptId != value))
				{
					this.OnReceiptIdChanging(value);
					this.SendPropertyChanging();
					this._ReceiptId = value;
					this.SendPropertyChanged("ReceiptId");
					this.OnReceiptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_receiptdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> receiptdate
		{
			get
			{
				return this._receiptdate;
			}
			set
			{
				if ((this._receiptdate != value))
				{
					this.OnreceiptdateChanging(value);
					this.SendPropertyChanging();
					this._receiptdate = value;
					this.SendPropertyChanged("receiptdate");
					this.OnreceiptdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total", DbType="Money")]
		public System.Nullable<decimal> total
		{
			get
			{
				return this._total;
			}
			set
			{
				if ((this._total != value))
				{
					this.OntotalChanging(value);
					this.SendPropertyChanging();
					this._total = value;
					this.SendPropertyChanged("total");
					this.OntotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note", DbType="NVarChar(2000)")]
		public string note
		{
			get
			{
				return this._note;
			}
			set
			{
				if ((this._note != value))
				{
					this.OnnoteChanging(value);
					this.SendPropertyChanging();
					this._note = value;
					this.SendPropertyChanged("note");
					this.OnnoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="VarChar(20)")]
		public string PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffId", DbType="VarChar(20)")]
		public string StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusReceipt", DbType="Bit")]
		public System.Nullable<bool> statusReceipt
		{
			get
			{
				return this._statusReceipt;
			}
			set
			{
				if ((this._statusReceipt != value))
				{
					this.OnstatusReceiptChanging(value);
					this.SendPropertyChanging();
					this._statusReceipt = value;
					this.SendPropertyChanged("statusReceipt");
					this.OnstatusReceiptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Receipt", Storage="_Patient", ThisKey="PatientId", OtherKey="PatientId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Receipts.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Receipts.Add(this);
						this._PatientId = value.PatientId;
					}
					else
					{
						this._PatientId = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Receipt", Storage="_Staff", ThisKey="StaffId", OtherKey="StaffId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Receipts.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Receipts.Add(this);
						this._StaffId = value.StaffId;
					}
					else
					{
						this._StaffId = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ServiceId;
		
		private string _nameService;
		
		private System.Nullable<decimal> _price;
		
		private string _note;
		
		private EntitySet<ServiceTreatment> _ServiceTreatments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceIdChanging(string value);
    partial void OnServiceIdChanged();
    partial void OnnameServiceChanging(string value);
    partial void OnnameServiceChanged();
    partial void OnpriceChanging(System.Nullable<decimal> value);
    partial void OnpriceChanged();
    partial void OnnoteChanging(string value);
    partial void OnnoteChanged();
    #endregion
		
		public Service()
		{
			this._ServiceTreatments = new EntitySet<ServiceTreatment>(new Action<ServiceTreatment>(this.attach_ServiceTreatments), new Action<ServiceTreatment>(this.detach_ServiceTreatments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceId", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameService", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string nameService
		{
			get
			{
				return this._nameService;
			}
			set
			{
				if ((this._nameService != value))
				{
					this.OnnameServiceChanging(value);
					this.SendPropertyChanging();
					this._nameService = value;
					this.SendPropertyChanged("nameService");
					this.OnnameServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Money")]
		public System.Nullable<decimal> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note", DbType="NVarChar(500)")]
		public string note
		{
			get
			{
				return this._note;
			}
			set
			{
				if ((this._note != value))
				{
					this.OnnoteChanging(value);
					this.SendPropertyChanging();
					this._note = value;
					this.SendPropertyChanged("note");
					this.OnnoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceTreatment", Storage="_ServiceTreatments", ThisKey="ServiceId", OtherKey="ServiceId")]
		public EntitySet<ServiceTreatment> ServiceTreatments
		{
			get
			{
				return this._ServiceTreatments;
			}
			set
			{
				this._ServiceTreatments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceTreatments(ServiceTreatment entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ServiceTreatments(ServiceTreatment entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceTreatment")]
	public partial class ServiceTreatment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceTreatmentId;
		
		private string _ServiceId;
		
		private string _TreatmentId;
		
		private EntityRef<Service> _Service;
		
		private EntityRef<Treatment> _Treatment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceTreatmentIdChanging(int value);
    partial void OnServiceTreatmentIdChanged();
    partial void OnServiceIdChanging(string value);
    partial void OnServiceIdChanged();
    partial void OnTreatmentIdChanging(string value);
    partial void OnTreatmentIdChanged();
    #endregion
		
		public ServiceTreatment()
		{
			this._Service = default(EntityRef<Service>);
			this._Treatment = default(EntityRef<Treatment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceTreatmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServiceTreatmentId
		{
			get
			{
				return this._ServiceTreatmentId;
			}
			set
			{
				if ((this._ServiceTreatmentId != value))
				{
					this.OnServiceTreatmentIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceTreatmentId = value;
					this.SendPropertyChanged("ServiceTreatmentId");
					this.OnServiceTreatmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceId", DbType="VarChar(20)")]
		public string ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreatmentId", DbType="VarChar(20)")]
		public string TreatmentId
		{
			get
			{
				return this._TreatmentId;
			}
			set
			{
				if ((this._TreatmentId != value))
				{
					if (this._Treatment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTreatmentIdChanging(value);
					this.SendPropertyChanging();
					this._TreatmentId = value;
					this.SendPropertyChanged("TreatmentId");
					this.OnTreatmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceTreatment", Storage="_Service", ThisKey="ServiceId", OtherKey="ServiceId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ServiceTreatments.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ServiceTreatments.Add(this);
						this._ServiceId = value.ServiceId;
					}
					else
					{
						this._ServiceId = default(string);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Treatment_ServiceTreatment", Storage="_Treatment", ThisKey="TreatmentId", OtherKey="TreatmentId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Treatment Treatment
		{
			get
			{
				return this._Treatment.Entity;
			}
			set
			{
				Treatment previousValue = this._Treatment.Entity;
				if (((previousValue != value) 
							|| (this._Treatment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Treatment.Entity = null;
						previousValue.ServiceTreatments.Remove(this);
					}
					this._Treatment.Entity = value;
					if ((value != null))
					{
						value.ServiceTreatments.Add(this);
						this._TreatmentId = value.TreatmentId;
					}
					else
					{
						this._TreatmentId = default(string);
					}
					this.SendPropertyChanged("Treatment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StaffId;
		
		private string _identityNumber;
		
		private string _fullName;
		
		private System.DateTime _dateOfBirth;
		
		private bool _gender;
		
		private string _address;
		
		private string _phone;
		
		private string _experience;
		
		private string _email;
		
		private string _note;
		
		private string _certificateId;
		
		private System.Nullable<int> _PositionId;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<Prescription> _Prescriptions;
		
		private EntitySet<Receipt> _Receipts;
		
		private EntitySet<Treatment> _Treatments;
		
		private EntityRef<Position> _Position;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIdChanging(string value);
    partial void OnStaffIdChanged();
    partial void OnidentityNumberChanging(string value);
    partial void OnidentityNumberChanged();
    partial void OnfullNameChanging(string value);
    partial void OnfullNameChanged();
    partial void OndateOfBirthChanging(System.DateTime value);
    partial void OndateOfBirthChanged();
    partial void OngenderChanging(bool value);
    partial void OngenderChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnexperienceChanging(string value);
    partial void OnexperienceChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnnoteChanging(string value);
    partial void OnnoteChanged();
    partial void OncertificateIdChanging(string value);
    partial void OncertificateIdChanged();
    partial void OnPositionIdChanging(System.Nullable<int> value);
    partial void OnPositionIdChanged();
    #endregion
		
		public Staff()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			this._Receipts = new EntitySet<Receipt>(new Action<Receipt>(this.attach_Receipts), new Action<Receipt>(this.detach_Receipts));
			this._Treatments = new EntitySet<Treatment>(new Action<Treatment>(this.attach_Treatments), new Action<Treatment>(this.detach_Treatments));
			this._Position = default(EntityRef<Position>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffId", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_identityNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string identityNumber
		{
			get
			{
				return this._identityNumber;
			}
			set
			{
				if ((this._identityNumber != value))
				{
					this.OnidentityNumberChanging(value);
					this.SendPropertyChanging();
					this._identityNumber = value;
					this.SendPropertyChanged("identityNumber");
					this.OnidentityNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string fullName
		{
			get
			{
				return this._fullName;
			}
			set
			{
				if ((this._fullName != value))
				{
					this.OnfullNameChanging(value);
					this.SendPropertyChanging();
					this._fullName = value;
					this.SendPropertyChanged("fullName");
					this.OnfullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime dateOfBirth
		{
			get
			{
				return this._dateOfBirth;
			}
			set
			{
				if ((this._dateOfBirth != value))
				{
					this.OndateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._dateOfBirth = value;
					this.SendPropertyChanged("dateOfBirth");
					this.OndateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="Bit NOT NULL")]
		public bool gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(100)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="VarChar(20)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_experience", DbType="NVarChar(500)")]
		public string experience
		{
			get
			{
				return this._experience;
			}
			set
			{
				if ((this._experience != value))
				{
					this.OnexperienceChanging(value);
					this.SendPropertyChanging();
					this._experience = value;
					this.SendPropertyChanged("experience");
					this.OnexperienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(200)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note", DbType="NVarChar(1000)")]
		public string note
		{
			get
			{
				return this._note;
			}
			set
			{
				if ((this._note != value))
				{
					this.OnnoteChanging(value);
					this.SendPropertyChanging();
					this._note = value;
					this.SendPropertyChanged("note");
					this.OnnoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_certificateId", DbType="NVarChar(100)")]
		public string certificateId
		{
			get
			{
				return this._certificateId;
			}
			set
			{
				if ((this._certificateId != value))
				{
					this.OncertificateIdChanging(value);
					this.SendPropertyChanging();
					this._certificateId = value;
					this.SendPropertyChanged("certificateId");
					this.OncertificateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionId", DbType="Int")]
		public System.Nullable<int> PositionId
		{
			get
			{
				return this._PositionId;
			}
			set
			{
				if ((this._PositionId != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionIdChanging(value);
					this.SendPropertyChanging();
					this._PositionId = value;
					this.SendPropertyChanged("PositionId");
					this.OnPositionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Account", Storage="_Accounts", ThisKey="StaffId", OtherKey="StaffId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Prescription", Storage="_Prescriptions", ThisKey="StaffId", OtherKey="StaffId")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Receipt", Storage="_Receipts", ThisKey="StaffId", OtherKey="StaffId")]
		public EntitySet<Receipt> Receipts
		{
			get
			{
				return this._Receipts;
			}
			set
			{
				this._Receipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Treatment", Storage="_Treatments", ThisKey="StaffId", OtherKey="StaffId")]
		public EntitySet<Treatment> Treatments
		{
			get
			{
				return this._Treatments;
			}
			set
			{
				this._Treatments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Staff", Storage="_Position", ThisKey="PositionId", OtherKey="PositionId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._PositionId = value.PositionId;
					}
					else
					{
						this._PositionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Treatment")]
	public partial class Treatment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TreatmentId;
		
		private string _diagnose;
		
		private string _method;
		
		private System.DateTime _dayOfTreatment;
		
		private string _PatientId;
		
		private string _StaffId;
		
		private EntitySet<ServiceTreatment> _ServiceTreatments;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTreatmentIdChanging(string value);
    partial void OnTreatmentIdChanged();
    partial void OndiagnoseChanging(string value);
    partial void OndiagnoseChanged();
    partial void OnmethodChanging(string value);
    partial void OnmethodChanged();
    partial void OndayOfTreatmentChanging(System.DateTime value);
    partial void OndayOfTreatmentChanged();
    partial void OnPatientIdChanging(string value);
    partial void OnPatientIdChanged();
    partial void OnStaffIdChanging(string value);
    partial void OnStaffIdChanged();
    #endregion
		
		public Treatment()
		{
			this._ServiceTreatments = new EntitySet<ServiceTreatment>(new Action<ServiceTreatment>(this.attach_ServiceTreatments), new Action<ServiceTreatment>(this.detach_ServiceTreatments));
			this._Patient = default(EntityRef<Patient>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreatmentId", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TreatmentId
		{
			get
			{
				return this._TreatmentId;
			}
			set
			{
				if ((this._TreatmentId != value))
				{
					this.OnTreatmentIdChanging(value);
					this.SendPropertyChanging();
					this._TreatmentId = value;
					this.SendPropertyChanged("TreatmentId");
					this.OnTreatmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diagnose", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string diagnose
		{
			get
			{
				return this._diagnose;
			}
			set
			{
				if ((this._diagnose != value))
				{
					this.OndiagnoseChanging(value);
					this.SendPropertyChanging();
					this._diagnose = value;
					this.SendPropertyChanged("diagnose");
					this.OndiagnoseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_method", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string method
		{
			get
			{
				return this._method;
			}
			set
			{
				if ((this._method != value))
				{
					this.OnmethodChanging(value);
					this.SendPropertyChanging();
					this._method = value;
					this.SendPropertyChanged("method");
					this.OnmethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dayOfTreatment", DbType="Date NOT NULL")]
		public System.DateTime dayOfTreatment
		{
			get
			{
				return this._dayOfTreatment;
			}
			set
			{
				if ((this._dayOfTreatment != value))
				{
					this.OndayOfTreatmentChanging(value);
					this.SendPropertyChanging();
					this._dayOfTreatment = value;
					this.SendPropertyChanged("dayOfTreatment");
					this.OndayOfTreatmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="VarChar(20)")]
		public string PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffId", DbType="VarChar(20)")]
		public string StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Treatment_ServiceTreatment", Storage="_ServiceTreatments", ThisKey="TreatmentId", OtherKey="TreatmentId")]
		public EntitySet<ServiceTreatment> ServiceTreatments
		{
			get
			{
				return this._ServiceTreatments;
			}
			set
			{
				this._ServiceTreatments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Treatment", Storage="_Patient", ThisKey="PatientId", OtherKey="PatientId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Treatments.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Treatments.Add(this);
						this._PatientId = value.PatientId;
					}
					else
					{
						this._PatientId = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Treatment", Storage="_Staff", ThisKey="StaffId", OtherKey="StaffId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Treatments.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Treatments.Add(this);
						this._StaffId = value.StaffId;
					}
					else
					{
						this._StaffId = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceTreatments(ServiceTreatment entity)
		{
			this.SendPropertyChanging();
			entity.Treatment = this;
		}
		
		private void detach_ServiceTreatments(ServiceTreatment entity)
		{
			this.SendPropertyChanging();
			entity.Treatment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeMedicine")]
	public partial class TypeMedicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TypeMedicineId;
		
		private string _nameTypeOfMedicine;
		
		private string _DrugSuppliersId;
		
		private EntitySet<Medicine> _Medicines;
		
		private EntityRef<DrugSupplier> _DrugSupplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeMedicineIdChanging(string value);
    partial void OnTypeMedicineIdChanged();
    partial void OnnameTypeOfMedicineChanging(string value);
    partial void OnnameTypeOfMedicineChanged();
    partial void OnDrugSuppliersIdChanging(string value);
    partial void OnDrugSuppliersIdChanged();
    #endregion
		
		public TypeMedicine()
		{
			this._Medicines = new EntitySet<Medicine>(new Action<Medicine>(this.attach_Medicines), new Action<Medicine>(this.detach_Medicines));
			this._DrugSupplier = default(EntityRef<DrugSupplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeMedicineId", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TypeMedicineId
		{
			get
			{
				return this._TypeMedicineId;
			}
			set
			{
				if ((this._TypeMedicineId != value))
				{
					this.OnTypeMedicineIdChanging(value);
					this.SendPropertyChanging();
					this._TypeMedicineId = value;
					this.SendPropertyChanged("TypeMedicineId");
					this.OnTypeMedicineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameTypeOfMedicine", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string nameTypeOfMedicine
		{
			get
			{
				return this._nameTypeOfMedicine;
			}
			set
			{
				if ((this._nameTypeOfMedicine != value))
				{
					this.OnnameTypeOfMedicineChanging(value);
					this.SendPropertyChanging();
					this._nameTypeOfMedicine = value;
					this.SendPropertyChanged("nameTypeOfMedicine");
					this.OnnameTypeOfMedicineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugSuppliersId", DbType="VarChar(20)")]
		public string DrugSuppliersId
		{
			get
			{
				return this._DrugSuppliersId;
			}
			set
			{
				if ((this._DrugSuppliersId != value))
				{
					if (this._DrugSupplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrugSuppliersIdChanging(value);
					this.SendPropertyChanging();
					this._DrugSuppliersId = value;
					this.SendPropertyChanged("DrugSuppliersId");
					this.OnDrugSuppliersIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMedicine_Medicine", Storage="_Medicines", ThisKey="TypeMedicineId", OtherKey="TypeMedicineId")]
		public EntitySet<Medicine> Medicines
		{
			get
			{
				return this._Medicines;
			}
			set
			{
				this._Medicines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugSupplier_TypeMedicine", Storage="_DrugSupplier", ThisKey="DrugSuppliersId", OtherKey="DrugSuppliersId", IsForeignKey=true, DeleteRule="CASCADE")]
		public DrugSupplier DrugSupplier
		{
			get
			{
				return this._DrugSupplier.Entity;
			}
			set
			{
				DrugSupplier previousValue = this._DrugSupplier.Entity;
				if (((previousValue != value) 
							|| (this._DrugSupplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DrugSupplier.Entity = null;
						previousValue.TypeMedicines.Remove(this);
					}
					this._DrugSupplier.Entity = value;
					if ((value != null))
					{
						value.TypeMedicines.Add(this);
						this._DrugSuppliersId = value.DrugSuppliersId;
					}
					else
					{
						this._DrugSuppliersId = default(string);
					}
					this.SendPropertyChanged("DrugSupplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medicines(Medicine entity)
		{
			this.SendPropertyChanging();
			entity.TypeMedicine = this;
		}
		
		private void detach_Medicines(Medicine entity)
		{
			this.SendPropertyChanging();
			entity.TypeMedicine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkingStatus")]
	public partial class WorkingStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _WorkingStatusId;
		
		private System.Nullable<int> _AccountId;
		
		private System.Nullable<System.DateTime> _timeBegin;
		
		private System.Nullable<System.DateTime> _timeEnd;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkingStatusIdChanging(string value);
    partial void OnWorkingStatusIdChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    partial void OntimeBeginChanging(System.Nullable<System.DateTime> value);
    partial void OntimeBeginChanged();
    partial void OntimeEndChanging(System.Nullable<System.DateTime> value);
    partial void OntimeEndChanged();
    #endregion
		
		public WorkingStatus()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkingStatusId", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string WorkingStatusId
		{
			get
			{
				return this._WorkingStatusId;
			}
			set
			{
				if ((this._WorkingStatusId != value))
				{
					this.OnWorkingStatusIdChanging(value);
					this.SendPropertyChanging();
					this._WorkingStatusId = value;
					this.SendPropertyChanged("WorkingStatusId");
					this.OnWorkingStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int")]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeBegin", DbType="Date")]
		public System.Nullable<System.DateTime> timeBegin
		{
			get
			{
				return this._timeBegin;
			}
			set
			{
				if ((this._timeBegin != value))
				{
					this.OntimeBeginChanging(value);
					this.SendPropertyChanging();
					this._timeBegin = value;
					this.SendPropertyChanged("timeBegin");
					this.OntimeBeginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeEnd", DbType="Date")]
		public System.Nullable<System.DateTime> timeEnd
		{
			get
			{
				return this._timeEnd;
			}
			set
			{
				if ((this._timeEnd != value))
				{
					this.OntimeEndChanging(value);
					this.SendPropertyChanging();
					this._timeEnd = value;
					this.SendPropertyChanged("timeEnd");
					this.OntimeEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_WorkingStatus", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.WorkingStatus.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.WorkingStatus.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
